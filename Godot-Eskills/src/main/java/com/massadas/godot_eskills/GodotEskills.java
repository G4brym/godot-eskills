package com.massadas.godot_eskills;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.util.ArraySet;
import android.util.Log;

import androidx.annotation.NonNull;

import org.godotengine.godot.Dictionary;
import org.godotengine.godot.Godot;
import org.godotengine.godot.plugin.GodotPlugin;
import org.godotengine.godot.plugin.SignalInfo;
import org.godotengine.godot.plugin.UsedByGodot;

import java.util.List;
import java.util.Map;
import java.util.Set;

public class GodotEskills extends GodotPlugin {
    private static final String BASE_URL = "https://apichain.catappult.io/transaction/eskills?";
    private static final int REQUEST_CODE = 123;
    private static final int RESULT_OK = 0;
    private static final String SESSION = "SESSION";
    private static final String TAG = "godot";

    private final Activity activity;
    private String sessionToken;

    private final RoomApi roomApi;

    public GodotEskills(Godot godot) {
        super(godot);
        activity = godot.getActivity();
        roomApi = new RoomApi();
    }

    public void onMainActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_CODE) {
            Log.d(TAG, data.toString());
            Log.d(TAG, String.valueOf(data.getData()));
            Log.d(TAG, "resultCode: " + resultCode);

            if (resultCode == RESULT_OK) {
                sessionToken = data.getStringExtra(SESSION);
                Log.d(TAG, "Session Token: " + sessionToken);

                emitSignal("match_found");
            } else {
                emitSignal("payment_error", data.toString());
            }
        }
    }

    @UsedByGodot
    public String getSessionToken() {
        return sessionToken;
    }

    @UsedByGodot
    public Dictionary updateScore(int score, String status) {
        return roomApi.patchRoom(score, status);
    }

    @UsedByGodot
    public Dictionary getRoom() {
        return roomApi.getRoom();
    }

    @UsedByGodot
    public void findRoom(Dictionary matchConfiguration) {
        String url = "";

        for (Map.Entry<String, Object> entry : matchConfiguration.entrySet()) {
            if (url.equals("")) {
                url = BASE_URL + entry.getKey() + "=" + entry.getValue();
            } else {
                url = url.concat("&" + entry.getKey() + "=" + entry.getValue());
            }
        }

        Log.d(TAG, "OSP url: " + url);
        Intent intent = buildTargetIntent(url);
        try {
            emitSignal("payment_started");
            activity.startActivityForResult(intent, REQUEST_CODE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method generates the intent with the provided One Step URL to target
     * the
     * AppCoins Wallet.
     *
     * @param url The url that generated by following the One Step payment rules
     * @return The intent used to call the wallet
     */
    private Intent buildTargetIntent(String url) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setData(Uri.parse(url));
        // Check if there is an application that can process the AppCoins Billing
        // flow
        PackageManager packageManager =
                activity.getApplicationContext().getPackageManager();
        List<ResolveInfo> appsList = packageManager
                .queryIntentActivities(intent,
                        PackageManager.MATCH_DEFAULT_ONLY);
        for (ResolveInfo app : appsList) {
            if (app.activityInfo.packageName.equals("cm.aptoide.pt")) {
                // If there's aptoide installed always choose Aptoide as default to open
                // url
                intent.setPackage(app.activityInfo.packageName);
                break;
            } else if (app.activityInfo.packageName.equals("com.appcoins.wallet")) {
                // If Aptoide is not installed and wallet is installed then choose Wallet
                // as default to open url
                intent.setPackage(app.activityInfo.packageName);
            }
        }
        return intent;
    }

    @NonNull
    @Override
    public String getPluginName() {
        return "GodotEskills";
    }

    @NonNull
    @Override
    public Set<SignalInfo> getPluginSignals() {
        Set<SignalInfo> signals = new ArraySet<>();

        signals.add(new SignalInfo("payment_started"));
        signals.add(new SignalInfo("payment_error", String.class));
        signals.add(new SignalInfo("match_found"));

        return signals;
    }
}